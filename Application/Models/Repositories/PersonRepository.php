<?php

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * PersonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonRepository extends EntityRepository
{
    /**
     * Get a person and all its associations
     *
     * @param int $person_id
     *
     * @return \Entities\Person
     */
    public function findWithAllData($person_id) {
        $query = $this->_em
            ->createQuery('
                SELECT p, u, i, pf, a, e, fx, ph, ra, fa FROM Entities\Person p
                LEFT JOIN p.account u
                LEFT JOIN p.profile pf
                    LEFT JOIN pf.research_area ra
                    LEFT JOIN pf.institution i
                        LEFT JOIN i.funding_agencies fa
                LEFT JOIN p.address a
                LEFT JOIN p.emails e
                LEFT JOIN p.faxnumbers fx
                LEFT JOIN p.phonenumbers ph
                WHERE p.id = :person_id
        ');

        $query->setParameter('person_id', $person_id);

        return $query->getSingleResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
    }

    /**
     * Get a person and all its associations by their username
     *
     * @param string $username
     *
     * @return \Entities\Person
     */
    public function findByUsername($username) {
        $query = $this->_em
            ->createQuery('
                SELECT p, i, pf, a, e, fx, ph, ra, fa FROM Entities\Person p
                INNER JOIN p.account u
                LEFT JOIN p.profile pf
                    LEFT JOIN pf.research_area ra
                    LEFT JOIN pf.institution i
                        LEFT JOIN i.funding_agencies fa
                LEFT JOIN p.address a
                LEFT JOIN p.emails e
                LEFT JOIN p.faxnumbers fx
                LEFT JOIN p.phonenumbers ph
                WHERE u.username = :username
        ');
        $query->setParameter('username', $username);

        return $query->getSingleResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
    }

    /**
     * Find a person doubly by his/her first name and last name
     *
     * @param mixed $person
     *
     * @return Entities\Person
     */
    public function findByName($person) {
        $query = $this->_em
            ->createQuery('
                SELECT p FROM Entities\Person p
                WHERE p.firstname = :firstname
                AND p.lastname = :lastname
        ');

        $query->setParameters(array(
            'firstname' => $person['firstname'],
            'lastname' => $person['lastname'],
        ));

        return $query->getSingleResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
    }

    /**
     * Get a person by email
     *
     * @param string $email
     *
     * @return \Entities\Person
     */
    public function findOneByEmail($email) {
        $query = $this->_em->createQuery('
            SELECT e, p, u FROM Entities\Person p
            INNER JOIN p.account u
            INNER JOIN p.emails e
            WHERE e.email= :email
        ');
        $query->setParameter('email', $email);

        return $query->getSingleResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
    }
}
