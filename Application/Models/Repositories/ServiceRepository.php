<?php

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends EntityRepository
{
    /**
     * (non-PHPdoc)
     * @see Doctrine\ORM.EntityRepository::findAll()
     */
    public function findAll() {
        $query = $this->_em->createQuery('
            SELECT s, m, ac FROM Entities\Service s
            LEFT JOIN s.maintainer m
            LEFT JOIN s.actions ac
            INDEX BY s.name
            ORDER BY s.name
        ');

        /* I've set the cache driver to APC in SilexProvider\Doctrine2ServiceProvider.php */
        $query->useResultCache(true);
        /* extra long since it won't change much */
        $query->setResultCacheLifetime(36000);

        /* array is better and we really don't need objects right now */
        return $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }

    /**
     * Finds all services associated with a specific user
     *
     * @param int $user_id
     *
     * @return mixed
     */
    public function findAllUsersServices($user_id) {
        $query = $this->_em->createQuery('
            SELECT s, m, ac FROM Entities\Service s
            INDEX BY s.name
            LEFT JOIN s.users u
            LEFT JOIN s.maintainer m
            LEFT JOIN s.actions ac
            WHERE u.id = :user_id
            ORDER BY s.name
        ');
        $query->setParameter('user_id', $user_id);

        /* array is better and we really don't need objects right now */
        return $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }

    /**
     * Finds all services names
     *
     * @return mixed
     */
    public function findAllServiceNames() {
        $query = $this->_em
            ->createQuery('
                SELECT s.name FROM Entities\Service s
                INDEX BY s.name
                ORDER BY s.name
            ');

        /* array is better and we really don't need objects right now */
        return $query->getResult(\Doctrine\ORM\Query::HYDRATE_SCALAR);
    }
}
