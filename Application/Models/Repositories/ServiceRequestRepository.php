<?php

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * ServiceRequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRequestRepository extends EntityRepository
{
    /**
     * Find all a user's service requests
     *
     * @param int $user_id
     *
     * @return mixed
     */
    public function findAllUsersServiceRequests($user_id) {
        $usr_query = $this->_em
            ->createQuery("
                SELECT sr, s, u, m, ac FROM Entities\ServiceRequest sr
                LEFT JOIN sr.account u
                LEFT JOIN sr.service s
                LEFT JOIN s.maintainer m
                LEFT JOIN s.actions ac
                WHERE u.id = :user_id AND sr.status != 'completed'
                ORDER BY s.name
            ");//INDEX BY s.name

        $usr_query->setParameter('user_id', $user_id);

        return $usr_query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }


    /**
     * Find 1 service request
     *
     * NoUniqueException is thrown if more thn one.
     *
     * @param int $service_id
     * @param int $account_id
     *
     * @return ServiceRequest
     */
    public function findOneByServiceIdAndAccountId($service_id, $account_id) {
        $service_query = $this->_em
            ->createQuery("
                SELECT sr, a, s, ac FROM Entities\ServiceRequest sr
                INNER JOIN sr.account a
                INNER JOIN sr.service s
                LEFT JOIN s.actions ac
                WHERE
                    a.id = :account_id
                AND
                    s.id = :service_id
            ");

        $service_query->setParameters(array(
            'service_id' => $service_id,
            'account_id'=> $account_id,
        ));

        return $service_query->getSingleResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
    }

    /**
     * Get 0 or more service requests as an array
     *
     * @param int $service_id
     * @param int $account_id
     *
     * @return mixed
     */
    public function findAllByServiceAndAccount($service_id, $account_id) {
        $service_query = $this->_em
            ->createQuery("
                SELECT sr, a, s, ac FROM Entities\ServiceRequest sr
                INNER JOIN sr.account a
                INNER JOIN sr.service s
                LEFT JOIN s.actions ac
                WHERE
                    a.id = :account_id
                AND
                    s.id = :service_id
            ");

        $service_query->setParameters(array(
            'service_id' => $service_id,
            'account_id'=> $account_id,
        ));

        return $service_query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }

}
